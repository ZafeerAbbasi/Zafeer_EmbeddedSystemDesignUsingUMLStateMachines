<?xml version="1.0" encoding="UTF-8"?>
<model version="6.0.0" links="0">
 <framework name="qpc"/>
 <package name="HSMs" stereotype="0x02">
  <class name="CLKALRM" superclass="qpc::QHsm">
   <attribute name="currTime" type="uint32_t" visibility="0x02" properties="0x01">
    <documentation>/* 
Updated by the timer ISR every 100ms.
Stores the time in number of 100 ms.
For example,
currTime = 1;    //100ms -&gt; 00:00:00.1
currTime = 9;    //900ms -&gt; 00:00:00.9
currTime = 10;   //1000ms  -&gt; 00:00:01.0
currTime = 605;  //60.5 seconds -&gt; 00:01:00.55

Note: This variable holds the time in 24H format.
*/</documentation>
   </attribute>
   <attribute name="tempTime" type="uint32_t" visibility="0x02" properties="0x00">
    <documentation>/*
Holds the time information during clock/alarm setting.
Stores the number of seconds.

Note: Depending on the value of the &quot;timeMode&quot; element, this variable will hold time in 24H or 12H format.
*/</documentation>
   </attribute>
   <attribute name="alarmTime" type="uint32_t" visibility="0x02" properties="0x00">
    <documentation>/*
User configured Alarm Time.
Stores the time in number of seconds. 

Note: The variable holds the time in 24H format.
*/</documentation>
   </attribute>
   <attribute name="alarmStatus" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>/*
Alarm ON/OFF status.
*/</documentation>
   </attribute>
   <attribute name="timeMode" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>/*
Time Mode: 24H or 12H
*/</documentation>
   </attribute>
   <attribute name="zMainObj" type="CLKALRM" visibility="0x02" properties="0x01">
    <documentation>/*
Main Application Object
*/</documentation>
   </attribute>
   <operation name="GetCurrentTime" type="uint32_t" visibility="0x00" properties="0x01">
    <documentation>/*
This returns the value of currTime
*/</documentation>
    <code>{
    /* Do something */
}</code>
   </operation>
   <operation name="UpdateCurrentTime" type="void" visibility="0x00" properties="0x01">
    <code>if( ++CLKALRM_currTime == MAX_TIME )
{
    CLKALRM_currTime = 0;
}</code>
   </operation>
   <operation name="SetCurrentTime" type="void" visibility="0x00" properties="0x01">
    <parameter name="newCurrTime" type="uint32_t"/>
    <code>__disable_irq()</code>
   </operation>
   <statechart properties="0x00">
    <initial target="../1/3">
     <initial_glyph conn="8,9,5,3,35,56,2">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="stateClock">
     <history type="deep" target="../3">
      <history_glyph conn="27,99,3,2,24,-13"/>
     </history>
     <tran trig="ALARM" target="../../2">
      <tran_glyph conn="113,128,2,3,7,-34,31,10">
       <action box="-9,5,10,2"/>
      </tran_glyph>
     </tran>
     <state name="stateSetting">
      <tran trig="ABORT" target="../../3">
       <tran_glyph conn="117,102,3,2,-39,-16">
        <action box="-6,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="OK" target="../../3">
       <tran_glyph conn="117,109,3,2,-44,-23">
        <action box="-3,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state name="stateClockSetting">
       <state_glyph node="129,42,52,22"/>
      </state>
      <state name="stateAlarmSetting">
       <state_glyph node="129,76,51,24"/>
      </state>
      <state_glyph node="117,30,76,85"/>
     </state>
     <state name="stateTicking">
      <tran trig="SET" target="../../2/2">
       <tran_glyph conn="93,70,1,3,12,-20,24">
        <action box="1,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="OK" target="../../2/3">
       <tran_glyph conn="93,77,1,3,12,13,24">
        <action box="1,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="45,57,48,29"/>
     </state>
     <state_glyph node="27,14,180,114"/>
    </state>
    <state name="stateAlarm">
     <tran trig="OK" target="../../1" cpref="../../1/0">
      <tran_glyph conn="89,172,3,3,-81,-73,18">
       <action box="-4,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="89,151,48,29"/>
    </state>
    <state_diagram size="255,197"/>
   </statechart>
  </class>
  <directory name="../Core/Src">
   <file name="clockalarm_sm.c">
    <text>#include &quot;qpc.h&quot;
#include &quot;clockalarm_sm.h&quot;
#include &quot;main.h&quot;

$declare${HSMs::CLKALRM}
$define${HSMs::CLKALRM_Ctor} /* Separate Definition Directive Since the function is not local to the class, i.e. can be useed outside the clockalarm_sm.c */
$define${HSMs::CLKALRM}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    CLKALRM_UpdateCurrentTime( );
}</text>
   </file>
  </directory>
  <directory name="../Core/Inc">
   <file name="clockalarm_sm.h">
    <text>#ifndef CLOCK_ALARM_SM_H
#define CLOCK_ALARM_SM_H

#define MAX_TIME    ( 864000UL )

typedef enum SIGNAL_eClockAlarmSignals
{
    SET_SIG = Q_USER_SIG,
    OK_SIG,
    ABORT_SIG,
    ALARM_SIG,
    TICK_SIG,
    MAX_SIG
}SIGNAL_eClockAlarmSignals;

$declare${HSMs::CLKALRM_Ctor}

#endif</text>
   </file>
  </directory>
  <operation name="CLKALRM_Ctor" type="void" visibility="0x00" properties="0x00">
   <code>/* Create main object and send to Initial State */
QHsm_ctor( &amp;CLKALRM_zMainObj.super, Q_STATE_CAST( CLKALRM_initial ) );</code>
  </operation>
 </package>
</model>
